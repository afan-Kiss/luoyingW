package com.hjq.demo.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjq.demo.daerxiansheng.sql.FrendsMessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRENDS_MESSAGE_ENTITY".
*/
public class FrendsMessageEntityDao extends AbstractDao<FrendsMessageEntity, Long> {

    public static final String TABLENAME = "FRENDS_MESSAGE_ENTITY";

    /**
     * Properties of entity FrendsMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property ToUserImage = new Property(2, String.class, "toUserImage", false, "TO_USER_IMAGE");
        public final static Property ContentType = new Property(3, int.class, "contentType", false, "CONTENT_TYPE");
        public final static Property MessageType = new Property(4, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property Duration = new Property(5, long.class, "Duration", false, "DURATION");
        public final static Property ToUid = new Property(6, String.class, "toUid", false, "TO_UID");
        public final static Property ToUserName = new Property(7, String.class, "toUserName", false, "TO_USER_NAME");
        public final static Property Time = new Property(8, long.class, "Time", false, "TIME");
        public final static Property UserName = new Property(9, String.class, "UserName", false, "USER_NAME");
        public final static Property MessageSendingType = new Property(10, int.class, "messageSendingType", false, "MESSAGE_SENDING_TYPE");
        public final static Property Card = new Property(11, String.class, "card", false, "CARD");
        public final static Property ToType = new Property(12, String.class, "toType", false, "TO_TYPE");
    }


    public FrendsMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FrendsMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRENDS_MESSAGE_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"TO_USER_IMAGE\" TEXT," + // 2: toUserImage
                "\"CONTENT_TYPE\" INTEGER NOT NULL ," + // 3: contentType
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 4: messageType
                "\"DURATION\" INTEGER NOT NULL ," + // 5: Duration
                "\"TO_UID\" TEXT," + // 6: toUid
                "\"TO_USER_NAME\" TEXT," + // 7: toUserName
                "\"TIME\" INTEGER NOT NULL ," + // 8: Time
                "\"USER_NAME\" TEXT," + // 9: UserName
                "\"MESSAGE_SENDING_TYPE\" INTEGER NOT NULL ," + // 10: messageSendingType
                "\"CARD\" TEXT," + // 11: card
                "\"TO_TYPE\" TEXT);"); // 12: toType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRENDS_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FrendsMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String toUserImage = entity.getToUserImage();
        if (toUserImage != null) {
            stmt.bindString(3, toUserImage);
        }
        stmt.bindLong(4, entity.getContentType());
        stmt.bindLong(5, entity.getMessageType());
        stmt.bindLong(6, entity.getDuration());
 
        String toUid = entity.getToUid();
        if (toUid != null) {
            stmt.bindString(7, toUid);
        }
 
        String toUserName = entity.getToUserName();
        if (toUserName != null) {
            stmt.bindString(8, toUserName);
        }
        stmt.bindLong(9, entity.getTime());
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(10, UserName);
        }
        stmt.bindLong(11, entity.getMessageSendingType());
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(12, card);
        }
 
        String toType = entity.getToType();
        if (toType != null) {
            stmt.bindString(13, toType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FrendsMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String toUserImage = entity.getToUserImage();
        if (toUserImage != null) {
            stmt.bindString(3, toUserImage);
        }
        stmt.bindLong(4, entity.getContentType());
        stmt.bindLong(5, entity.getMessageType());
        stmt.bindLong(6, entity.getDuration());
 
        String toUid = entity.getToUid();
        if (toUid != null) {
            stmt.bindString(7, toUid);
        }
 
        String toUserName = entity.getToUserName();
        if (toUserName != null) {
            stmt.bindString(8, toUserName);
        }
        stmt.bindLong(9, entity.getTime());
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(10, UserName);
        }
        stmt.bindLong(11, entity.getMessageSendingType());
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(12, card);
        }
 
        String toType = entity.getToType();
        if (toType != null) {
            stmt.bindString(13, toType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FrendsMessageEntity readEntity(Cursor cursor, int offset) {
        FrendsMessageEntity entity = new FrendsMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // toUserImage
            cursor.getInt(offset + 3), // contentType
            cursor.getInt(offset + 4), // messageType
            cursor.getLong(offset + 5), // Duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // toUid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // toUserName
            cursor.getLong(offset + 8), // Time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UserName
            cursor.getInt(offset + 10), // messageSendingType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // card
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // toType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FrendsMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToUserImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContentType(cursor.getInt(offset + 3));
        entity.setMessageType(cursor.getInt(offset + 4));
        entity.setDuration(cursor.getLong(offset + 5));
        entity.setToUid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.getLong(offset + 8));
        entity.setUserName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMessageSendingType(cursor.getInt(offset + 10));
        entity.setCard(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setToType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FrendsMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FrendsMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FrendsMessageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
