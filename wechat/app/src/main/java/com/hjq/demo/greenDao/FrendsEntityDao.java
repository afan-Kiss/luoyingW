package com.hjq.demo.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjq.demo.daerxiansheng.sql.FrendsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRENDS_ENTITY".
*/
public class FrendsEntityDao extends AbstractDao<FrendsEntity, Long> {

    public static final String TABLENAME = "FRENDS_ENTITY";

    /**
     * Properties of entity FrendsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Fsate = new Property(2, int.class, "fsate", false, "FSATE");
        public final static Property Mag = new Property(3, String.class, "mag", false, "MAG");
        public final static Property Head_img = new Property(4, String.class, "head_img", false, "HEAD_IMG");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(6, String.class, "nickname", false, "NICKNAME");
        public final static Property Card = new Property(7, String.class, "card", false, "CARD");
        public final static Property Disturb = new Property(8, int.class, "disturb", false, "DISTURB");
        public final static Property Black = new Property(9, int.class, "black", false, "BLACK");
        public final static Property UserCard = new Property(10, String.class, "userCard", false, "USER_CARD");
    }


    public FrendsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FrendsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRENDS_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERID\" TEXT," + // 1: userid
                "\"FSATE\" INTEGER NOT NULL ," + // 2: fsate
                "\"MAG\" TEXT," + // 3: mag
                "\"HEAD_IMG\" TEXT," + // 4: head_img
                "\"USERNAME\" TEXT," + // 5: username
                "\"NICKNAME\" TEXT," + // 6: nickname
                "\"CARD\" TEXT," + // 7: card
                "\"DISTURB\" INTEGER NOT NULL ," + // 8: disturb
                "\"BLACK\" INTEGER NOT NULL ," + // 9: black
                "\"USER_CARD\" TEXT);"); // 10: userCard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRENDS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FrendsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
        stmt.bindLong(3, entity.getFsate());
 
        String mag = entity.getMag();
        if (mag != null) {
            stmt.bindString(4, mag);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(5, head_img);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(8, card);
        }
        stmt.bindLong(9, entity.getDisturb());
        stmt.bindLong(10, entity.getBlack());
 
        String userCard = entity.getUserCard();
        if (userCard != null) {
            stmt.bindString(11, userCard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FrendsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
        stmt.bindLong(3, entity.getFsate());
 
        String mag = entity.getMag();
        if (mag != null) {
            stmt.bindString(4, mag);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(5, head_img);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(8, card);
        }
        stmt.bindLong(9, entity.getDisturb());
        stmt.bindLong(10, entity.getBlack());
 
        String userCard = entity.getUserCard();
        if (userCard != null) {
            stmt.bindString(11, userCard);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FrendsEntity readEntity(Cursor cursor, int offset) {
        FrendsEntity entity = new FrendsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.getInt(offset + 2), // fsate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // head_img
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // card
            cursor.getInt(offset + 8), // disturb
            cursor.getInt(offset + 9), // black
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // userCard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FrendsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFsate(cursor.getInt(offset + 2));
        entity.setMag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHead_img(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCard(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDisturb(cursor.getInt(offset + 8));
        entity.setBlack(cursor.getInt(offset + 9));
        entity.setUserCard(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FrendsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FrendsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FrendsEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
