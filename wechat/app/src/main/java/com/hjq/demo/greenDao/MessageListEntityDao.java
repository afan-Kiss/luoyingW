package com.hjq.demo.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjq.demo.daerxiansheng.sql.MessageListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_LIST_ENTITY".
*/
public class MessageListEntityDao extends AbstractDao<MessageListEntity, Long> {

    public static final String TABLENAME = "MESSAGE_LIST_ENTITY";

    /**
     * Properties of entity MessageListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Message_id = new Property(1, String.class, "message_id", false, "MESSAGE_ID");
        public final static Property Rval = new Property(2, String.class, "rval", false, "RVAL");
        public final static Property Rtype = new Property(3, String.class, "rtype", false, "RTYPE");
        public final static Property Rclass = new Property(4, String.class, "rclass", false, "RCLASS");
        public final static Property Rtime = new Property(5, String.class, "rtime", false, "RTIME");
        public final static Property Duration = new Property(6, String.class, "duration", false, "DURATION");
        public final static Property Disturb = new Property(7, String.class, "disturb", false, "DISTURB");
        public final static Property Nickname = new Property(8, String.class, "nickname", false, "NICKNAME");
        public final static Property User_id = new Property(9, String.class, "user_id", false, "USER_ID");
        public final static Property Head_img = new Property(10, String.class, "head_img", false, "HEAD_IMG");
        public final static Property User_card = new Property(11, String.class, "user_card", false, "USER_CARD");
        public final static Property Group_name = new Property(12, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Group_id = new Property(13, String.class, "group_id", false, "GROUP_ID");
        public final static Property Group_img = new Property(14, String.class, "group_img", false, "GROUP_IMG");
        public final static Property Card = new Property(15, String.class, "card", false, "CARD");
        public final static Property MessCount = new Property(16, int.class, "messCount", false, "MESS_COUNT");
        public final static Property CurrentuserCard = new Property(17, String.class, "currentuserCard", false, "CURRENTUSER_CARD");
    }


    public MessageListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_LIST_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: message_id
                "\"RVAL\" TEXT," + // 2: rval
                "\"RTYPE\" TEXT," + // 3: rtype
                "\"RCLASS\" TEXT," + // 4: rclass
                "\"RTIME\" TEXT," + // 5: rtime
                "\"DURATION\" TEXT," + // 6: duration
                "\"DISTURB\" TEXT," + // 7: disturb
                "\"NICKNAME\" TEXT," + // 8: nickname
                "\"USER_ID\" TEXT," + // 9: user_id
                "\"HEAD_IMG\" TEXT," + // 10: head_img
                "\"USER_CARD\" TEXT," + // 11: user_card
                "\"GROUP_NAME\" TEXT," + // 12: group_name
                "\"GROUP_ID\" TEXT," + // 13: group_id
                "\"GROUP_IMG\" TEXT," + // 14: group_img
                "\"CARD\" TEXT," + // 15: card
                "\"MESS_COUNT\" INTEGER NOT NULL ," + // 16: messCount
                "\"CURRENTUSER_CARD\" TEXT);"); // 17: currentuserCard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_LIST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message_id = entity.getMessage_id();
        if (message_id != null) {
            stmt.bindString(2, message_id);
        }
 
        String rval = entity.getRval();
        if (rval != null) {
            stmt.bindString(3, rval);
        }
 
        String rtype = entity.getRtype();
        if (rtype != null) {
            stmt.bindString(4, rtype);
        }
 
        String rclass = entity.getRclass();
        if (rclass != null) {
            stmt.bindString(5, rclass);
        }
 
        String rtime = entity.getRtime();
        if (rtime != null) {
            stmt.bindString(6, rtime);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String disturb = entity.getDisturb();
        if (disturb != null) {
            stmt.bindString(8, disturb);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(9, nickname);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(10, user_id);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(11, head_img);
        }
 
        String user_card = entity.getUser_card();
        if (user_card != null) {
            stmt.bindString(12, user_card);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(13, group_name);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(14, group_id);
        }
 
        String group_img = entity.getGroup_img();
        if (group_img != null) {
            stmt.bindString(15, group_img);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(16, card);
        }
        stmt.bindLong(17, entity.getMessCount());
 
        String currentuserCard = entity.getCurrentuserCard();
        if (currentuserCard != null) {
            stmt.bindString(18, currentuserCard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message_id = entity.getMessage_id();
        if (message_id != null) {
            stmt.bindString(2, message_id);
        }
 
        String rval = entity.getRval();
        if (rval != null) {
            stmt.bindString(3, rval);
        }
 
        String rtype = entity.getRtype();
        if (rtype != null) {
            stmt.bindString(4, rtype);
        }
 
        String rclass = entity.getRclass();
        if (rclass != null) {
            stmt.bindString(5, rclass);
        }
 
        String rtime = entity.getRtime();
        if (rtime != null) {
            stmt.bindString(6, rtime);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String disturb = entity.getDisturb();
        if (disturb != null) {
            stmt.bindString(8, disturb);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(9, nickname);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(10, user_id);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(11, head_img);
        }
 
        String user_card = entity.getUser_card();
        if (user_card != null) {
            stmt.bindString(12, user_card);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(13, group_name);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(14, group_id);
        }
 
        String group_img = entity.getGroup_img();
        if (group_img != null) {
            stmt.bindString(15, group_img);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(16, card);
        }
        stmt.bindLong(17, entity.getMessCount());
 
        String currentuserCard = entity.getCurrentuserCard();
        if (currentuserCard != null) {
            stmt.bindString(18, currentuserCard);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageListEntity readEntity(Cursor cursor, int offset) {
        MessageListEntity entity = new MessageListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rval
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rtype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rclass
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // disturb
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nickname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // head_img
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_card
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // group_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // group_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // group_img
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // card
            cursor.getInt(offset + 16), // messCount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // currentuserCard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRval(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRtype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRclass(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRtime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDisturb(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNickname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHead_img(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_card(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGroup_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGroup_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGroup_img(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCard(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMessCount(cursor.getInt(offset + 16));
        entity.setCurrentuserCard(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageListEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
