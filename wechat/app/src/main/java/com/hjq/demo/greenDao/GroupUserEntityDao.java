package com.hjq.demo.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjq.demo.daerxiansheng.sql.GroupUserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_USER_ENTITY".
*/
public class GroupUserEntityDao extends AbstractDao<GroupUserEntity, Long> {

    public static final String TABLENAME = "GROUP_USER_ENTITY";

    /**
     * Properties of entity GroupUserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Founder = new Property(2, int.class, "founder", false, "FOUNDER");
        public final static Property Fsate = new Property(3, int.class, "fsate", false, "FSATE");
        public final static Property Head_img = new Property(4, String.class, "head_img", false, "HEAD_IMG");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(6, String.class, "nickname", false, "NICKNAME");
        public final static Property Card = new Property(7, String.class, "card", false, "CARD");
        public final static Property GroupCard = new Property(8, String.class, "groupCard", false, "GROUP_CARD");
    }


    public GroupUserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupUserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_USER_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"FOUNDER\" INTEGER NOT NULL ," + // 2: founder
                "\"FSATE\" INTEGER NOT NULL ," + // 3: fsate
                "\"HEAD_IMG\" TEXT," + // 4: head_img
                "\"USERNAME\" TEXT," + // 5: username
                "\"NICKNAME\" TEXT," + // 6: nickname
                "\"CARD\" TEXT," + // 7: card
                "\"GROUP_CARD\" TEXT);"); // 8: groupCard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupUserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
        stmt.bindLong(3, entity.getFounder());
        stmt.bindLong(4, entity.getFsate());
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(5, head_img);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(8, card);
        }
 
        String groupCard = entity.getGroupCard();
        if (groupCard != null) {
            stmt.bindString(9, groupCard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupUserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
        stmt.bindLong(3, entity.getFounder());
        stmt.bindLong(4, entity.getFsate());
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(5, head_img);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(8, card);
        }
 
        String groupCard = entity.getGroupCard();
        if (groupCard != null) {
            stmt.bindString(9, groupCard);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupUserEntity readEntity(Cursor cursor, int offset) {
        GroupUserEntity entity = new GroupUserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.getInt(offset + 2), // founder
            cursor.getInt(offset + 3), // fsate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // head_img
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // card
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // groupCard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupUserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFounder(cursor.getInt(offset + 2));
        entity.setFsate(cursor.getInt(offset + 3));
        entity.setHead_img(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCard(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupCard(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupUserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupUserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupUserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
