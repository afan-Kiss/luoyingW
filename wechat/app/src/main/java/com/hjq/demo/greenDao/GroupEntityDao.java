package com.hjq.demo.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hjq.demo.daerxiansheng.sql.GroupEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_ENTITY".
*/
public class GroupEntityDao extends AbstractDao<GroupEntity, Long> {

    public static final String TABLENAME = "GROUP_ENTITY";

    /**
     * Properties of entity GroupEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property GroupImg = new Property(1, String.class, "groupImg", false, "GROUP_IMG");
        public final static Property GroupName = new Property(2, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Disturb = new Property(3, int.class, "disturb", false, "DISTURB");
        public final static Property GroupNotic = new Property(4, String.class, "groupNotic", false, "GROUP_NOTIC");
        public final static Property Card = new Property(5, String.class, "card", false, "CARD");
        public final static Property UserCard = new Property(6, String.class, "userCard", false, "USER_CARD");
    }


    public GroupEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_IMG\" TEXT," + // 1: groupImg
                "\"GROUP_NAME\" TEXT," + // 2: groupName
                "\"DISTURB\" INTEGER NOT NULL ," + // 3: disturb
                "\"GROUP_NOTIC\" TEXT," + // 4: groupNotic
                "\"CARD\" TEXT," + // 5: card
                "\"USER_CARD\" TEXT);"); // 6: userCard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupImg = entity.getGroupImg();
        if (groupImg != null) {
            stmt.bindString(2, groupImg);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
        stmt.bindLong(4, entity.getDisturb());
 
        String groupNotic = entity.getGroupNotic();
        if (groupNotic != null) {
            stmt.bindString(5, groupNotic);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(6, card);
        }
 
        String userCard = entity.getUserCard();
        if (userCard != null) {
            stmt.bindString(7, userCard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupImg = entity.getGroupImg();
        if (groupImg != null) {
            stmt.bindString(2, groupImg);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
        stmt.bindLong(4, entity.getDisturb());
 
        String groupNotic = entity.getGroupNotic();
        if (groupNotic != null) {
            stmt.bindString(5, groupNotic);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(6, card);
        }
 
        String userCard = entity.getUserCard();
        if (userCard != null) {
            stmt.bindString(7, userCard);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupEntity readEntity(Cursor cursor, int offset) {
        GroupEntity entity = new GroupEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupImg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupName
            cursor.getInt(offset + 3), // disturb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupNotic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // card
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // userCard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisturb(cursor.getInt(offset + 3));
        entity.setGroupNotic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserCard(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
